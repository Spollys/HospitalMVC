/*!
 * jQuery Validation Plugin - v1.17.0 - 7/29/2017
 * https://jqueryvalidation.org/
 * Copyright (c) 2017 Jörn Zaefferer; Licensed MIT
 */

(function ($) {
    'use strict';

    // Adds a method for validating max words
    $.validator.addMethod("maxWords", function (value, element, params) {
        return this.optional(element) || countWords(value) <= params;
    }, $.validator.format("Please enter {0} words or less."));

    // Adds a method for validating min words
    $.validator.addMethod("minWords", function (value, element, params) {
        return this.optional(element) || countWords(value) >= params;
    }, $.validator.format("Please enter at least {0} words."));

    // Adds a method for validating range of words
    $.validator.addMethod("rangeWords", function (value, element, params) {
        var words = countWords(value);
        return this.optional(element) || (words >= params[0] && words <= params[1]);
    }, $.validator.format("Please enter between {0} and {1} words."));

    // Adds a method for validating file extension
    $.validator.addMethod("extension", function (value, element, params) {
        var extensions = params.replace(/,/g, "|");
        return this.optional(element) || value.match(new RegExp("\\.(" + extensions + ")$", "i"));
    }, $.validator.format("Please enter a value with a valid extension."));

    // Adds a method for validating IBAN
    $.validator.addMethod("iban", function (value, element) {
        if (this.optional(element)) return true;

        var countryCode = value.substring(0, 2);
        if (!ibanRegex[countryCode]) return false;

        value = value.replace(/ /g, "").toUpperCase();
        return ibanRegex[countryCode].test(value);
    }, "Please specify a valid IBAN");

    // Adds a method for validating NIE
    $.validator.addMethod("nieES", function (value, element) {
        if (this.optional(element)) return true;

        return /^[MXYZ]{1}[0-9]{7,8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/i.test(value) &&
            getLetter(value) === getCheckLetter(value);
    }, "Please specify a valid NIE number.");

    // Adds a method for validating NIF
    $.validator.addMethod("nifES", function (value, element) {
        if (this.optional(element)) return true;

        return /^[0-9]{8}[A-Z]{1}$/.test(value) ?
            getLetter(value) === getCheckLetter(value) :
            /^[KLM]{1}[0-9]{7}[ABEHMNPRVWXY]{1}$/i.test(value);
    }, "Please specify a valid NIF number.");

    // Adds a method for validating VIN
    $.validator.addMethod("vinUS", function (value) {
        if (value.length !== 17) return false;

        var weights = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9];
        var sum = 0;
        var weightedDigits = [];

        for (var i = 0; i < value.length; i++) {
            var char = value.charAt(i);
            if (char.match(/[0-9]/)) {
                weightedDigits.push(parseInt(char, 10) * weights[i]);
            } else if (char.match(/[A-HJ-NPR-Z]/)) {
                weightedDigits.push(weights[i] + 9);
            } else if (char.match(/[K]/)) {
                weightedDigits.push(weights[i] + 10);
            } else if (char.match(/[O]/)) {
                weightedDigits.push(weights[i] + 11);
            } else if (char.match(/[Q]/)) {
                weightedDigits.push(weights[i] + 12);
            } else if (char.match(/[U]/)) {
                weightedDigits.push(weights[i] + 13);
            } else if (char.match(/[W]/)) {
                weightedDigits.push(weights[i] + 14);
            } else if (char.match(/[Y]/)) {
                weightedDigits.push(weights[i] + 15);
            } else if (char.match(/[Z]/)) {
                weightedDigits.push(weights[i] + 16);
            } else {
                return false;
            }
        }

        for (var j = 0; j < weightedDigits.length; j += 2) {
            sum += weightedDigits[j];
        }

        for (var k = 1; k < weightedDigits.length; k += 2) {
            var digit = weightedDigits[k];
            sum += Math.floor(digit / 10) + (digit % 10);
        }

        return sum % 11 === 0;
    }, "The specified vehicle identification number (VIN) is invalid.");

    // Adds a method for validating US ZIP Code
    $.validator.addMethod("zipcodeUS", function (value, element) {
        return this.optional(element) || /^\d{5}(-\d{4})?$/.test(value);
    }, "The specified US ZIP Code is invalid.");

    // Adds a method for validating US ZIP range
    $.validator.addMethod("ziprange", function (value, element) {
        return this.optional(element) || /^902[0-5]\d{3}-\d{4}$/.test(value);
    }, "Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx");

    // Helper function for counting words
    function countWords(value) {
        return value.trim().replace(/<[^>]*>/g, " ").replace(/&nbsp;|&#160;/g, " ").replace(/[.(),;:!?%#$'\"_+=\/\-“”’]*/g, "").match(/\b\w+\b/g).length;
    }

    // Helper function for getting check letter for NIE and NIF
    function getLetter(value) {
        var letter = value.charAt(value.length - 1);
        return letter.toUpperCase();
    }

    // Helper function for getting check letter for NIE
    function getCheckLetter(value) {
        var str = value.substring(0, value.length - 1);
        var num = 0;

        for (var i = 0; i < str.length; i++) {
            num += parseInt(str.charAt(i), 35);
        }

        return "TRWAGMYFPDXBNJZSQVHLCKET".charAt(num % 23);
    }

    // Object for storing IBAN regex patterns
    var ibanRegex = {
        AL: "\\d{8}[\\dA-Z]{16}",
        AD: "\\d{8}[\\dA-Z]{12}",
        AT: "\\d{16}",
        AZ: "[\\dA-Z]{4}\\d{20}",
        BE: "\\d{12}",
        BH: "[A-Z]{4}[\\dA-Z]{14}",
        BA: "\\d{16}",
        BR: "\\d{23}[A-Z][\\dA-Z]",
        BG: "[A-Z]{4}\\d{6}[\\dA-Z]{8}",
        CR: "\\d{17}",
        HR: "\\d{17}",
        CY: "\\d{8}[\\dA-Z]{16}",
        CZ: "\\d{20}",
        DK: "\\d{14}",
        DO: "[A-Z]{4}\\d{20}",
        EE: "\\d{16}",
        FO: "\\d{14}",
        FI: "\\d{14}",
        FR: "\\d{10}[\\dA-Z]{11}\\d{2}",
        GE: "[\\dA-Z]{2}\\d{16}",
        DE: "\\d{18}",
        GI: "[A-Z]{4}[\\dA-Z]{15}",
        GR: "\\d{7}[\\dA-Z]{16}",
        GL: "\\d{14}",
        GT: "[\\dA-Z]{4}[\\dA-Z]{20}",
        HU: "\\d{24}",
        IS: "\\d{22}",
        IE: "[\\dA-Z]{4}\\d{14}",
        IL: "\\d{19}",
        IT: "[A-Z]\\d{10}[\\dA-Z]{12}",
        KZ: "\\d{3}[\\dA-Z]{13}",
        KW: "[A-Z]{4}[\\dA-Z]{22}",
        LV: "[A-Z]{4}[\\dA-Z]{13}",
        LB: "\\d{4}[\\dA-Z]{20}",
        LI: "\\d{5}[\\dA-Z]{12}",
        LT: "\\d{16}",
        LU: "\\d{3}[\\dA-Z]{13}",
        MK: "\\d{3}[\\dA-Z]{10}\\d{2}",
        MT: "[A-Z]{4}\\d{5}[\\dA-Z]{18}",
        MR: "\\d{23}",
        MU: "[A-Z]{4}\\d{19}[A-Z]{3}",
        MC: "\\d{10}[\\dA-Z]{11}\\d{2}",
        MD: "[\\dA-Z]{2}\\d{18}",
        ME: "\\d{18}",
        NL: "[A-Z]{4}\\d{10}",
        NO: "\\d{11}",
        PK: "[\\dA-Z]{4}\\d{16}",
        PS: "[\\dA-Z]{4}\\d{21}",
        PL: "\\d{24}",
        PT: "\\d{21}",
        RO: "[A-Z]{4}[\\dA-Z]{16}",
        SM: "[A-Z]\\d{10}[\\dA-Z]{12}",
        SA: "\\d{2}[\\dA-Z]{18}",
        RS: "\\d{18}",
        SK: "\\d{20}",
        SI: "\\d{15}",
        ES: "\\d{20}",
        SE: "\\d{20}",
        CH: "\\d{5}[\\dA-Z]{12}",
        TN: "\\d{20}",
        TR: "\\d{5}[\\dA-Z]{17}",
        AE: "\\d{3}\\d{16}",
        GB: "[A-Z]{4}\\d{14}",
        VG: "[\\dA-Z]{4}\\d{16}"
    };

})(jQuery);
